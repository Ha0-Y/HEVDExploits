#pragma once

#include <iostream>
#include <Windows.h>
#include <Psapi.h>
#include <vector>

#define DEVICE_LINK_NAME "\\\\.\\HacksysExtremeVulnerableDriver"

extern BYTE StealToken[0x100];

typedef struct _PIPE_HANDLES
{
    HANDLE read;
    HANDLE write;
} PIPE_HANDLES;


PIPE_HANDLES CreatePipeObject();

void Error(const char*);

DWORD64 GetModuleBase(LPCWSTR drvName);

VOID SpawnShell();

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef const UNICODE_STRING* PCUNICODE_STRING;

typedef enum _KTHREAD_STATE
{
    Initialized,
    Ready,
    Running,
    Standby,
    Terminated,
    Waiting,
    Transition,
    DeferredReady,
    GateWaitObsolete,
    WaitingForProcessInSwap,
    MaximumThreadState
} KTHREAD_STATE, * PKTHREAD_STATE;

typedef enum _KWAIT_REASON
{
    Executive = 0,
    FreePage,
    PageIn,
    PoolAllocation,
    DelayExecution,
    Suspended,
    UserRequest,
    WrExecutive,
    WrFreePage,
    WrPageIn,
    WrPoolAllocation,
    WrDelayExecution,
    WrSuspended,
    WrUserRequest,
    WrEventPair,
    WrQueue,
    WrLpcReceive,
    WrLpcReply,
    WrVirtualMemory,
    WrPageOut,
    WrRendezvous,
    WrKeyedEvent,
    WrTerminated,
    WrProcessInSwap,
    WrCpuRateControl,
    WrCalloutStack,
    WrKernel,
    WrResource,
    WrPushLock,
    WrMutex,
    WrQuantumEnd,
    WrDispatchInt,
    WrPreempted,
    WrYieldExecution,
    WrFastMutex,
    WrGuardedMutex,
    WrRundown,
    WrAlertByThreadId,
    WrDeferredPreempt,
    MaximumWaitReason
} KWAIT_REASON, * PKWAIT_REASON;

typedef LONG KPRIORITY;

typedef struct _CLIENT_ID {
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
} CLIENT_ID;

// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-tsts/e82d73e4-cedb-4077-9099-d58f3459722f
typedef struct _SYSTEM_THREAD_INFORMATION {
    LARGE_INTEGER       KernelTime;
    LARGE_INTEGER       UserTime;
    LARGE_INTEGER       CreateTime;
    ULONG               WaitTime;
    PVOID               StartAddress;
    CLIENT_ID           ClientId;
    LONG                Priority;
    LONG                BasePriority;
    ULONG               ContextSwitches;
    ULONG               ThreadState;
    ULONG               WaitReason;
#ifdef _WIN64
    ULONG Reserved[4];
#endif
} SYSTEM_THREAD_INFORMATION, * PSYSTEM_THREAD_INFORMATION;


// https://github.com/sam-b/windows_kernel_address_leaks/blob/master/NtQuerySysInfo_SystemProcessInformation/NtQuerySysInfo_SystemProcessInformation/NtQuerySysInfo_SystemProcessInformation.cpp
// private
typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
{
    SYSTEM_THREAD_INFORMATION   ThreadInfo;
    PVOID                       StackBase;
    PVOID                       StackLimit;
    PVOID                       Win32StartAddress;
    PVOID                       TebBase;            // since VISTA
    ULONG_PTR                   Reserved2;
    ULONG_PTR                   Reserved3;
    ULONG_PTR                   Reserved4;
} SYSTEM_EXTENDED_THREAD_INFORMATION, * PSYSTEM_EXTENDED_THREAD_INFORMATION;

typedef struct _SYSTEM_PROCESS_INFORMATION
{
    ULONG               NextEntryOffset;
    ULONG               NumberOfThreads;
    LARGE_INTEGER       WorkingSetPrivateSize;              // since VISTA
    ULONG               HardFaultCount;                     // since WIN7
    ULONG               NumberOfThreadsHighWatermark;       // since WIN7
    ULONGLONG           CycleTime;                          // since WIN7
    LARGE_INTEGER       CreateTime;
    LARGE_INTEGER       UserTime;
    LARGE_INTEGER       KernelTime;
    UNICODE_STRING      ImageName;
    KPRIORITY           BasePriority;
    HANDLE              UniqueProcessId;
    HANDLE              InheritedFromUniqueProcessId;
    ULONG               HandleCount;
    ULONG               SessionId;
    ULONG_PTR           UniqueProcessKey;                   // since VISTA (requires SystemExtendedProcessInformation)
    SIZE_T              PeakVirtualSize;
    SIZE_T              VirtualSize;
    ULONG               PageFaultCount;
    SIZE_T              PeakWorkingSetSize;
    SIZE_T              WorkingSetSize;
    SIZE_T              QuotaPeakPagedPoolUsage;
    SIZE_T              QuotaPagedPoolUsage;
    SIZE_T              QuotaPeakNonPagedPoolUsage;
    SIZE_T              QuotaNonPagedPoolUsage;
    SIZE_T              PagefileUsage;
    SIZE_T              PeakPagefileUsage;
    SIZE_T              PrivatePageCount;
    LARGE_INTEGER       ReadOperationCount;
    LARGE_INTEGER       WriteOperationCount;
    LARGE_INTEGER       OtherOperationCount;
    LARGE_INTEGER       ReadTransferCount;
    LARGE_INTEGER       WriteTransferCount;
    LARGE_INTEGER       OtherTransferCount;
} SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;

typedef struct _VM_COUNTERS {
    // the following was inferred by painful reverse engineering
    SIZE_T		   PeakVirtualSize;	// not actually
    SIZE_T         PageFaultCount;
    SIZE_T         PeakWorkingSetSize;
    SIZE_T         WorkingSetSize;
    SIZE_T         QuotaPeakPagedPoolUsage;
    SIZE_T         QuotaPagedPoolUsage;
    SIZE_T         QuotaPeakNonPagedPoolUsage;
    SIZE_T         QuotaNonPagedPoolUsage;
    SIZE_T         PagefileUsage;
    SIZE_T         PeakPagefileUsage;
    SIZE_T         VirtualSize;		// not actually
} VM_COUNTERS;

typedef struct _SYSTEM_EXTENDED_PROCESS_INFORMATION
{
    ULONG               NextEntryOffset;
    ULONG               NumberOfThreads;
    LARGE_INTEGER       SpareLi1;
    LARGE_INTEGER       SpareLi2;
    LARGE_INTEGER       SpareLi3;
    LARGE_INTEGER       CreateTime;
    LARGE_INTEGER       UserTime;
    LARGE_INTEGER       KernelTime;
    UNICODE_STRING      ImageName;
    KPRIORITY           BasePriority;
    ULONG               ProcessId;
    ULONG               InheritedFromUniqueProcessId;
    ULONG               HandleCount;
    ULONG               SessionId;
    PVOID               PageDirectoryBase;
    VM_COUNTERS         VirtualMemoryCounters;
    SIZE_T              PrivatePageCount;
    IO_COUNTERS         IoCounters;
    SYSTEM_EXTENDED_THREAD_INFORMATION Threads[1];
} SYSTEM_EXTENDED_PROCESS_INFORMATION, * PSYSTEM_EXTENDED_PROCESS_INFORMATION;
